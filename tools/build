#!/usr/bin/env sh

# Builds all packages or a subset of them in their ESM and CJS formats. Supports
# absolute and relative paths.
# For custom build options, see `build-pkg`.
#
# EXAMPLE
# ./build ../std-lib ../std-node

ProjectDir="$(cd "$(dirname "$0")/.." && pwd)"

: ${ENV:=pro}

. "$ProjectDir/tools/env.sh"
. "$ProjectDir/tools/env-styles.sh"

: ${Build:=build-pkg}
# : ${Fix:=fix-ts-imports}

if test $# -eq 0; then
        set -- "$ProjectDir/std-"*
fi

for pkg; do
        if test ! -e "$pkg"; then
                echo "Package '$pkg' not found."
                exit 1
        fi
        if test ! -e "$pkg/tsconfig.json"; then
                echo "Nothing to build for '$(basename "$pkg")' package."
                continue
        fi

        echo "Building ${GreenStyle}$(basename "$pkg")${ResetStyle}:"

        echo "${TaskMarker} ${BlueStyle}esm${ResetStyle}..."
        printf -- "${GrayStyle}"
        if ! $Build $pkg --module esnext; then
                echo "${ResetStyle}"
                exit 1
        fi
        printf -- "${ResetStyle}"

        # echo "${TaskMarker} ${BlueStyle}fix-ts-imports${ResetStyle}..."
        # printf -- "${GrayStyle}"
        # if ! $Fix; then
        #         echo "${ResetStyle}"
        #         exit 2
        # fi
        # printf -- "${ResetStyle}"

        # echo "${TaskMarker} ${BlueStyle}cjs${ResetStyle}..."
        # printf -- "${GrayStyle}"
        # if ! $Build $pkg --module commonjs --outDir cjs --declarationDir cjs --tsBuildInfoFile cjs/.tsbuildinfo; then
        #         echo "${ResetStyle}"
        #         exit 1
        # fi
        # printf -- "${ResetStyle}"
done

echo "${GreenStyle}done${ResetStyle}"
